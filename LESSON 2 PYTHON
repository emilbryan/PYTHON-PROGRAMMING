{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3919b753-2f18-4792-9e6a-c2fca08d155e",
   "metadata": {},
   "source": [
    "# Review Question 4\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5cf56ea5-40f3-45e5-9bed-6f5b3b190b3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Please enter something to count the characters:  12\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of characters inputted: 2\n"
     ]
    }
   ],
   "source": [
    "user_input_length = input(\"Please enter something to count the characters: \")\n",
    "print(\"Number of characters inputted:\", len(user_input_length))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8bee62d0-7d9c-4bd8-9c33-94ca53b7d2aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Integer result: 84\n"
     ]
    }
   ],
   "source": [
    "int_string = \"42\"\n",
    "int_number = int(int_string)  # Convert string to integer\n",
    "result_int = int_number * 2  # Multiply by another number\n",
    "print(\"Integer result:\", result_int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5bf272f0-5721-48f9-9155-4ef5eb1c9ce3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Float result: 6.28\n"
     ]
    }
   ],
   "source": [
    "float_string = \"3.14\"\n",
    "float_number = float(float_string)  # Convert string to float\n",
    "result_float = float_number * 2  # Multiply by another number\n",
    "print(\"Float result:\", result_float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "926179b0-86a5-48cc-aef2-82d0b8a91b24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Side by side: The answer is 42\n"
     ]
    }
   ],
   "source": [
    "string_object = \"The answer is\"\n",
    "integer_object = 42\n",
    "print(\"Side by side:\", string_object, str(integer_object))  # Convert integer to string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5c89ff0d-080e-4405-9153-3addc4b890c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the first number:  2\n",
      "Enter the second number:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The result of multiplication is: 6.0\n"
     ]
    }
   ],
   "source": [
    "num1 = input(\"Enter the first number: \")\n",
    "num2 = input(\"Enter the second number: \")\n",
    "# Convert inputs to float for multiplication\n",
    "result_multiplication = float(num1) * float(num2)\n",
    "print(\"The result of multiplication is:\", result_multiplication)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36a8dd46-4f0b-4ffa-8c72-29dc173dd296",
   "metadata": {},
   "source": [
    "# Review Question 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b565d7c0-59b0-45bd-86d6-ffd4bff13abe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result of .find(): -1\n"
     ]
    }
   ],
   "source": [
    "print(\"Result of .find():\", \"AAA\".find(\"a\"))  # This will return -1 since \"a\" is not found"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ad98eecd-76fd-4e7c-beba-a9fdcb0eb9a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Modified string: Somebody yaid yomething to Samantha.\n"
     ]
    }
   ],
   "source": [
    "original_string = \"Somebody said something to Samantha.\"\n",
    "modified_string = original_string.replace(\"s\", \"y\")\n",
    "print(\"Modified string:\", modified_string)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c84e09b8-6909-4df7-931f-987fdf783976",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string:  21\n",
      "Enter a letter to find:  32\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Result of .find(): -1\n"
     ]
    }
   ],
   "source": [
    "user_input = input(\"Enter a string: \")\n",
    "letter_to_find = input(\"Enter a letter to find: \")\n",
    "find_result = user_input.find(letter_to_find)\n",
    "print(\"Result of .find():\", find_result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "277d7028-7724-43eb-9974-89e10593384f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter some text:  eoia\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30i4\n"
     ]
    }
   ],
   "source": [
    "user_input = input(\"Enter some text: \")\n",
    "# Convert the input to leetspeak using the .replace() method\n",
    "leetspeak = user_input.replace(\"a\", \"4\") \\\n",
    "                       .replace(\"b\", \"8\") \\\n",
    "                       .replace(\"e\", \"3\") \\\n",
    "                       .replace(\"l\", \"1\") \\\n",
    "                       .replace(\"o\", \"0\") \\\n",
    "                       .replace(\"s\", \"5\") \\\n",
    "                       .replace(\"t\", \"7\")\n",
    "# Display the resulting string\n",
    "print(leetspeak)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "471c4492-80ba-4446-9641-cbc15cd1bca0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
