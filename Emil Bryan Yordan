{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4bdfdaf9-5daa-40a2-9de2-041cc05d021e",
   "metadata": {},
   "source": [
    "# 1st Long Exam Date: 09/10/2025"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44ff99b0-8df2-47e0-9590-39050b381577",
   "metadata": {},
   "source": [
    "# Emil Bryan Yordan BSIT 3/Block ID:23839251"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "94b1d846-0acf-4f10-bb04-d0af01df2d76",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your first name: Emil Bryan\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello Emil Bryan!\n"
     ]
    }
   ],
   "source": [
    "name = input (\"Enter your first name:\")\n",
    "print (\"Hello\",name + \"!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "90c43db8-979b-4750-9f93-1a76f89ac9f9",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "unterminated string literal (detected at line 3) (4291794805.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[5], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    print(\"The sum form 1 to\",n,\"is\",s\")\u001b[0m\n\u001b[1;37m                                      ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m unterminated string literal (detected at line 3)\n"
     ]
    }
   ],
   "source": [
    "n = int(input(\"Enter a positve integer:\")\n",
    "s = n * (n+1)//2\n",
    "print(\"The sum form 1 to\",n,\"is\",s\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6c592d1e-89cb-4680-bf03-02ea790f98f0",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after 'if' statement on line 2 (2301676358.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[14], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    elif letter == \"y\":\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after 'if' statement on line 2\n"
     ]
    }
   ],
   "source": [
    "letter = input(\"Enter a letter:\" ).lower()\n",
    "if letter in \"a e i o u\":\n",
    "elif letter == \"y\":\n",
    "    print \"Sometimes \"y\" is a vowel, and sometimes \"y\" is a constant\"\n",
    "else:\n",
    "        print(f\"{letter} is a constant:\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "27827e46-022f-434c-a6f7-6739ad178b54",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2623308034.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[22], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    def = is.palindrome ( textStr)->bool\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def = is.palindrome ( textStr)->bool\n",
    "cleaned (\"Join(char.lower() for char intext\")\n",
    "if char isalnom ()\n",
    "return cleaned == cleaned [::]\n",
    "word = input(\"Enter a word\")\n",
    "if is_palindrome (\"word\")\n",
    "print (\"Yeah, is a Palindrome\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "439fe4ab-a37e-4b87-8ac5-5e9005f7b41d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
